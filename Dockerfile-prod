FROM node:14.19.3-alpine@sha256:b5fd5877b6bb2bb443c63ea0e7a8dc5197d8f01ed4a8ca1416a203c52bcf283c AS appbuild
RUN npm install -g npm@8.10.0
USER node
ENV NODE_PATH=src \
    PORT=1340 \
    NODE_OPTIONS=--max_old_space_size=3072

WORKDIR /web

# prepare the client dir
COPY --chown=node:node ./client /web/client/

# install client dev dependencies for building app
RUN cd client && npm i

# prepare the server dir
COPY --chown=node:node ./server /web/server/

# # install server dev dependencies for building app
# RUN cd server && npm i

# build VMT React client for production
# RUN cd ./server && npm run build-production
RUN cd ./client && node --max-old-space-size=3072 scripts/build.js production

# # build encompass integration package -- is this actually needed?
# RUN cd ./server && npm run build-enc-production

# make a 2 part Dockerfile in order reduce overall image size of the final prod image
FROM node:14.19.3-alpine@sha256:b5fd5877b6bb2bb443c63ea0e7a8dc5197d8f01ed4a8ca1416a203c52bcf283c
RUN apk update && apk upgrade && apk add curl && rm -rf /var/cache/apk/*
RUN npm install -g npm@8.10.0
RUN mkdir -p /web/server && mkdir -p /web/client && chown -R node:node /web
ENV NODE_PATH=src \
    PORT=1340 \
    NODE_OPTIONS=--max_old_space_size=3072
USER node
WORKDIR /web

# copy the package.jsons to prepare for install
COPY --chown=node:node client/package*.json ./client/
COPY --chown=node:node server/package*.json ./server/

# install server dependencies only for prod
RUN cd ./server && npm i --only=production

# copy the built client folder from the build image into the prod image
COPY --from=appbuild --chown=node:node /web/client/build ./client/build
# copy the server code into the image
COPY --from=appbuild --chown=node:node /web/server ./server

EXPOSE 1340
CMD ["node", "/web/server/bin/www"]
#CMD ["tail", "-f", "/dev/null"] # uncomment this line to keep a crashing container up for troubleshooting