import React, { Component } from 'react';
import classes from './log.css';
import * as ReactDOM from 'react-dom';
import moment from 'moment';
class Log extends Component {

  state = {
    scrolling: false,
    autoScrolling: false,
  }

  componentDidUpdate(prevProps) {
    if (prevProps.currentIndex !== this.props.currentIndex) {
      this.setState({autoScrolling: true}, () => {
        this.scrollToPosition();
      })
    }
  }

  scrollToPosition = () => {
    const currentEntry = this.refs[this.props.currentIndex]
    const offset = currentEntry.offsetTop - this.refs.log.offsetTop;
    // this.refs.log.scrollBottom = 0;
    ReactDOM.findDOMNode(this.refs.log).scrollTop = offset;
    this.setState({autoScrolling: false})
  }

  handleScroll = () => {
    if (this.state.autoScrolling) return;
    if (this.timeout) {
      clearTimeout(this.timeout)
    }
    this.timeout = setTimeout(() => {
      this.timeout = null;
      this.setState({scrolling: false})
      // Calculate index from offset and position
      // const currentEntry = this.refs[this.props.currentIndex]
      // const offset = currentEntry.offsetTop - this.refs.log.offsetTop;
      // this.props.goToIndex()
    }, 500)
  }

  render() {
    return (
      <div ref='log' className={classes.Log} onScroll={this.handleScroll}>
        {
          this.props.log.map((event, i) => {
            let entry;
            if (event.text) {
              entry = <div>
                <div>{moment.unix(event.timestamp/1000).format('MM/DD/YYYY h:mm:ss A')}</div>
                {event.autogenerated ?
                  <div>{event.text}</div> : <div>{event.user.username}: {event.text}</div>
                }
              </div>
            }
            else if (event.synthetic) {
              entry = <div>{event.message}</div>
            } else {
              entry = <div>
                <div>{moment.unix(event.timestamp/1000).format('MM/DD/YYYY h:mm:ss A')}</div>
                <div>{event.description}</div>
              </div>
            }
            if (i === this.props.currentIndex) {
              return <div ref={i} className={classes.Entry} style={{color: 'white'}} key={i}>{entry}</div>
            } else {
              return <div className={classes.Entry} style={{color: 'white'}} key={i}>{entry}</div>
            }
          })
        }
      </div>
    )
  }
}

export default Log;
