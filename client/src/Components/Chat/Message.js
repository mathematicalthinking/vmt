import React from 'react';
import PropTypes from 'prop-types';
import { dateAndTime } from 'utils';
import Button from '../UI/Button/Button';
import Classes from './chat.css';

// const filter = new Filter();
// add words
// const addWordList = [];
// filter.addWords(...addWordList);

const Message = React.forwardRef((props, ref) => {
  const {
    message,
    showReference,
    onClick,
    highlighted,
    id,
    referencing,
    // isSimplified determines the user display options to streamline chat in Room
    isSimplified,
    reference,
  } = props;
  let highlightClass = '';
  let referenceClass = '';
  let referenceArrow = null;

  const nameGen = () => {
    let shortName = message.user.username;
    const maxLen = isSimplified ? 15 : 35;
    // currently always using abbreviated naming for both detailed and simple chat
    // if (!isSimplified) return shortName;
    if (shortName.includes('@'))
      shortName = shortName.substring(0, shortName.lastIndexOf('@'));
    if (shortName.length > maxLen) shortName = shortName.substring(0, maxLen);
    return shortName;
  };

  if (highlighted) {
    highlightClass = Classes.Highlight;
  }
  if (reference) {
    referenceClass = Classes.Reference;
    referenceArrow = (
      <Button
        theme="Arrow"
        click={showReference}
        type="button"
        id={message._id}
        data-testid={message._id}
      >
        {message.reference.elementType === 'chat_message' ? (
          <i className="fas fa-arrow-up" />
        ) : (
          <i className="fas fa-arrow-left" />
        )}
      </Button>
    );
  }
  if (message) {
    if (isSimplified && message.autogenerated) return null;
    const userName = message.autogenerated ? 'VMTbot' : nameGen();
    const formattedTimestamp = dateAndTime.toTimelineString(message.timestamp);
    return (
      <div
        key={id}
        ref={ref}
        className={[
          message.autogenerated ? Classes.VmtBotEntry : Classes.Entry,
          referenceClass,
          highlightClass,
        ].join(' ')}
        style={{
          cursor: message.reference || referencing ? 'pointer' : 'auto',
          color: message.color,
        }}
      >
        <div>
          <b>{userName}: </b>
          <span> {referenceArrow} </span>
          <span
            onClick={onClick}
            onKeyPress={onClick}
            role="button"
            tabIndex="0"
            data-testid={`msg-${id}`}
            className={Classes.Message}
          >
            {message.text}
          </span>
        </div>
        {/* CONSIDER CONDITIONALLLY FORMATIING THE DATE BASED ON HOW FAR IN THE PAST IT IS
              IF IT WAS LAST WEEK, SAYING THE DAY AND TIME IS MISLEADING */}
        {isSimplified ? null : (
          <div className={Classes.Timestamp}>{formattedTimestamp}</div>
        )}
      </div>
    );
  }
  return null;
});

Message.displayName = 'Message';

Message.propTypes = {
  message: PropTypes.shape({
    user: PropTypes.oneOfType([
      // might be an ObjectId (string) or an object
      PropTypes.string,
      PropTypes.shape({ username: PropTypes.string }),
    ]),
    _id: PropTypes.string,
    text: PropTypes.string,
    reference: PropTypes.shape({ elementType: PropTypes.string }),
    color: PropTypes.string,
    timestamp: PropTypes.number,
    autogenerated: PropTypes.bool,
  }).isRequired,
  highlighted: PropTypes.bool,
  id: PropTypes.string.isRequired,
  referencing: PropTypes.bool,
  isSimplified: PropTypes.bool,
  reference: PropTypes.bool.isRequired,
  onClick: PropTypes.func.isRequired,
  showReference: PropTypes.func.isRequired,
};

Message.defaultProps = {
  highlighted: false,
  referencing: false,
  isSimplified: true,
};
export default Message;
